name: Fetch & Build V8

#only use manually
on:
  workflow_dispatch:
    # Optionally, you can also define inputs for the workflow

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # do not stop the workflow if one of the job fails
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64

    steps:
    - uses: actions/checkout@v2

    - name: Pre-Clone Debugging Information
      run: |
        pwd
        echo $PATH

    - name: Setup Environment
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y curl git python3 lsb-release sudo
        elif [ "${{ runner.os }}" == "macOS" ]; then
          brew update
          brew install git
          brew install python || brew link --overwrite python
        fi
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "export PATH=$(pwd)/depot_tools:$PATH" >> $GITHUB_ENV
        echo "DEPOT_TOOLS=$(pwd)/depot_tools" >> $GITHUB_ENV
        echo "$(pwd)/depot_tools:$PATH" >> $GITHUB_PATH

    - name: Fetch V8 and Setup Build
      run: |
        fetch v8
        cd v8
        gclient sync
    
        # Generate build files with gn
        if [ "${{ matrix.arch }}" == "arm64" ]; then
          gn gen out.gn/arm64.release --args='is_component_build=true target_cpu="arm64" is_debug=false'
        else
          gn gen out.gn/x64.release --args='is_component_build=true target_cpu="x64" is_debug=false'
        fi
      
    - name: Build V8
      run: |
        cd ${{ github.workspace }}/v8
        if [ "${{ matrix.arch }}" == "arm64" ]; then
          ninja -C out.gn/arm64.release
        else
          ninja -C out.gn/x64.release
        fi

    - name: Create PR metadata
      id: pr_metadata
      run: |
        echo ::set-output name=pr_branch::"v8_$(cat deps/v8_version)_upgrade"
        echo ::set-output name=pr_commit_message::"Upgrade V8 binaries for $(cat deps/v8_version) version"
        echo ::set-output name=pr_body::"Auto-generated pull request to upgrade V8 binary for $(cat deps/v8_version) version"
    - name: Create PR
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{secrets.MY_PAT}}
        commit-message: ${{steps.pr_metadata.outputs.pr_commit_message}}
        branch: ${{steps.pr_metadata.outputs.pr_branch}}
        title: ${{steps.pr_metadata.outputs.pr_commit_message}}
        body: ${{steps.pr_metadata.outputs.pr_body}}